DROP TABLE LEVEL CASCADE;
DROP TABLE VEHICLE CASCADE;
DROP TABLE SPACE CASCADE;
DROP SEQUENCE SQ_LEVEL;
DROP SEQUENCE SQ_VEHICLE;
DROP SEQUENCE SQ_SPACE;


CREATE TABLE LEVEL (
  LEVEL_ID bigint NOT NULL,
  STORY character varying(255) NOT NULL UNIQUE, -- Business ID
  CONSTRAINT LEVEL_PK PRIMARY KEY (LEVEL_ID)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE LEVEL
  OWNER TO postgres;



CREATE TABLE VEHICLE (
  VEHICLE_ID bigint NOT NULL,
  TYPE character varying(255) NOT NULL,  -- 'CAR' or 'MOTORBIKE' for now
  LICENSE_PLATE character varying(255) NOT NULL UNIQUE, -- Business ID, the vehicle should not be inserted twice in the database
  CONSTRAINT VEHICLE_PK PRIMARY KEY (VEHICLE_ID)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE VEHICLE
  OWNER TO postgres;



CREATE TABLE SPACE (
  SPACE_ID bigint NOT NULL,
  POSITION int NOT NULL, -- POSITION + LEVEL_FK are the business ID
  VEHICLE_FK bigint UNIQUE,  -- Nullable - in case it's null, it means the space is empty
  LEVEL_FK bigint NOT NULL, -- POSITION + LEVEL_FK are the business ID
  CONSTRAINT SPACE_PK PRIMARY KEY (SPACE_ID),
  CONSTRAINT LEVEL_POSITION_UK UNIQUE (LEVEL_FK, POSITION), -- POSITION + LEVEL_FK are the business ID, so should be unique
  CONSTRAINT SPACE_VEHICLE_FK FOREIGN KEY (VEHICLE_FK)
      REFERENCES VEHICLE (VEHICLE_ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT SPACE_LEVEL_FK FOREIGN KEY (LEVEL_FK)
      REFERENCES LEVEL (LEVEL_ID) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE SPACE
  OWNER TO postgres;



INSERT INTO LEVEL (LEVEL_ID, STORY) VALUES (1, 'A');
INSERT INTO LEVEL (LEVEL_ID, STORY) VALUES (2, 'B');
INSERT INTO LEVEL (LEVEL_ID, STORY) VALUES (3, 'C');

INSERT INTO VEHICLE (VEHICLE_ID, TYPE, LICENSE_PLATE) VALUES (1, 'CAR', 'M G 5387');
INSERT INTO VEHICLE (VEHICLE_ID, TYPE, LICENSE_PLATE) VALUES (2, 'CAR', 'AC 627 LC');
INSERT INTO VEHICLE (VEHICLE_ID, TYPE, LICENSE_PLATE) VALUES (3, 'CAR', 'M A 9938');
INSERT INTO VEHICLE (VEHICLE_ID, TYPE, LICENSE_PLATE) VALUES (4, 'MOTORBIKE', 'M N 9923');
INSERT INTO VEHICLE (VEHICLE_ID, TYPE, LICENSE_PLATE) VALUES (5, 'MOTORBIKE', 'M N 1131');
INSERT INTO VEHICLE (VEHICLE_ID, TYPE, LICENSE_PLATE) VALUES (6, 'CAR', 'M Z 2398');
INSERT INTO VEHICLE (VEHICLE_ID, TYPE, LICENSE_PLATE) VALUES (7, 'MOTORBIKE', 'AB 223 TY');

-- Level A has 10 spaces
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (1, 1, 1, 1);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (2, 2, 1, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (3, 3, 1, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (4, 4, 1, 2);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (5, 5, 1, 3);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (6, 6, 1, 4);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (7, 7, 1, 5);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (8, 8, 1, 6);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (9, 9, 1, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (10, 10, 1, 7);

-- Level B has 5 spaces
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (11, 1, 2, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (12, 2, 2, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (13, 3, 2, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (14, 4, 2, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (15, 5, 2, null);

-- Level C has 5 spaces
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (16, 1, 3, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (17, 2, 3, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (18, 3, 3, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (19, 4, 3, null);
INSERT INTO SPACE (SPACE_ID, POSITION, LEVEL_FK, VEHICLE_FK) VALUES (20, 5, 3, null);

-- Create sequences
CREATE SEQUENCE SQ_LEVEL CYCLE
   INCREMENT 1
   START 4
   MINVALUE 1
   MAXVALUE 9999999
   CACHE 20;
ALTER SEQUENCE SQ_LEVEL
  OWNER TO postgres;

CREATE SEQUENCE SQ_SPACE CYCLE
   INCREMENT 1
   START 21
   MINVALUE 1
   MAXVALUE 9999999
   CACHE 20;
ALTER SEQUENCE SQ_SPACE
  OWNER TO postgres;

CREATE SEQUENCE SQ_VEHICLE CYCLE
   INCREMENT 1
   START 8
   MINVALUE 1
   MAXVALUE 9999999
   CACHE 20;
ALTER SEQUENCE SQ_VEHICLE
  OWNER TO postgres;

 -- Count the number of free spaces in the garage 
SELECT 
   COUNT(s.SPACE_ID)
FROM
   SPACE s
WHERE
   s.VEHICLE_FK is NULL;



 -- Get space by license plate
SELECT
   s.SPACE_ID, s.VEHICLE_FK, s.LEVEL_FK, s.POSITION, v.LICENSE_PLATE
FROM
   SPACE s, VEHICLE v
WHERE
   s.VEHICLE_FK = v.VEHICLE_ID
AND
   v.LICENSE_PLATE = 'M4'; 



 -- Get the first free space
SELECT 
    s.SPACE_ID, s.VEHICLE_FK, s.LEVEL_FK, s.POSITION
FROM
    SPACE s
WHERE
    s.VEHICLE_FK is NULL
ORDER BY 
   s.SPACE_ID ASC
LIMIT 1; 



 -- Get vehicle by license plate 
SELECT 
    v.VEHICLE_ID, v.TYPE, v.LICENSE_PLATE
FROM
   VEHICLE v
WHERE
   v.LICENSE_PLATE = 'M3';




 -- Update vehicle


 -- Update space - set vehicle


 -- Update space - unset vehicle